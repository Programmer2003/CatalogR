@using CatalogR.Models;
@using CatalogR.Services;
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Navigations
@inject LinkGenerator LinkGenerator
@inject RazorLocalizerService Localizer
@inject IJSRuntime JSRuntime
@{
}
<SfGrid @ref="Grid" DataSource="@Items" AllowPaging AllowSorting AllowFiltering AllowGrouping AllowResizing AllowExcelExport AllowPdfExport>
    <GridTemplates>
        <ToolbarTemplate>
            <SfToolbar>
                <ToolbarEvents Clicked="ToolbarClickHandler"></ToolbarEvents>
                <ToolbarItems>
                    <ToolbarItem Text="View">
                        <Template>
                            <div title="@Localizer.GetString("Item Details")"><button class='e-btn e-tbar-btn'><i class="bi bi-eye"></i></button> </div>
                        </Template>
                    </ToolbarItem>
                    @if (Owns)
                    {
                        <ToolbarItem Text="Edit">
                            <Template>
                                <div title="@Localizer.GetString("Edit Item")"><button class='e-btn e-tbar-btn'><i class="bi bi-pencil-square"></i></button> </div>
                            </Template>
                        </ToolbarItem>
                        <ToolbarItem Text="Delete">
                            <Template>
                                <div title="@Localizer.GetString("Delete Item")"><button class='e-btn e-tbar-btn'><i class="bi bi-trash3"></i></button> </div>
                            </Template>
                        </ToolbarItem>
                    }
                    <ToolbarItem Id="Grid_excelexport">
                        <Template>
                            <div title="@Localizer.GetString("Export") CSV"><button class='e-btn e-tbar-btn'><i class="bi bi-file-earmark-excel"></i></button> </div>
                        </Template>
                    </ToolbarItem>
                    <ToolbarItem Id="Grid_pdfexport">
                        <Template>
                            <div title="@Localizer.GetString("Export") PDF"><button class='e-btn e-tbar-btn'><i class="bi bi-filetype-pdf"></i></button> </div>
                        </Template>
                    </ToolbarItem>
                </ToolbarItems>
            </SfToolbar>
        </ToolbarTemplate>
    </GridTemplates>
    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Menu"></GridFilterSettings>
    <GridPageSettings PageSizes="@(new string[] { "5", "10" , "20" })" PageSize="5"></GridPageSettings>
    <GridGroupSettings ShowGroupedColumn=true EnableLazyLoading="true"></GridGroupSettings>
    <GridColumns>
        <GridColumn Field=@nameof(Item.Name) HeaderText="@Localizer.GetString("Name")" Width="120" AllowGrouping="false"></GridColumn>
        <GridColumn Field=@nameof(Item.Tags) HeaderText="@Localizer.GetString("Tags")" Width="50" AllowFiltering="false" AllowSorting="false" AllowGrouping="false">
            <Template>
                @{
                    var item = (context as Item);
                    if (item == null || item.Tags.Count() == 0)
                    {
                        <div> - </div>
                    }
                    else
                    {
                        <div class="d-flex gap-1">
                            @foreach (var tag in item.Tags)
                            {
                                <a href="@LinkGenerator.GetPathByAction("Index","Search",new {tag = tag.Name})" class="btn btn-sm btn-outline-primary rounded-pill">
                                    @tag.Name
                                </a>
                            }
                        </div>
                    }
                }
            </Template>
        </GridColumn>
        <GridColumn Field=@nameof(Item.CustomString1) HeaderText="@Collection.CustomString1_Name" HideAtMedia='(min-width: 576px)' Width="60" Visible="@(Collection.CustomString1_State)"></GridColumn>
        <GridColumn Field=@nameof(Item.CustomString2) HeaderText="@Collection.CustomString2_Name" HideAtMedia='(min-width: 768px)' Width="60" Visible="@(Collection.CustomString2_State)"></GridColumn>
        <GridColumn Field=@nameof(Item.CustomString3) HeaderText="@Collection.CustomString3_Name" HideAtMedia='(min-width: 768px)' Width="60" Visible="@(Collection.CustomString3_State)"></GridColumn>
        <GridColumn Field=@nameof(Item.CustomDate1) HeaderText="@Collection.CustomDate1_Name" Width="60" HideAtMedia='(min-width: 992px)' Visible="@(Collection.CustomDate1_State)"></GridColumn>
        <GridColumn Field=@nameof(Item.CustomDate2) HeaderText="@Collection.CustomDate2_Name" Width="60" HideAtMedia='(min-width: 992px)' Visible="@(Collection.CustomDate2_State)"></GridColumn>
        <GridColumn Field=@nameof(Item.CustomDate3) HeaderText="@Collection.CustomDate3_Name" Width="60" HideAtMedia='(min-width: 992px)' Visible="@(Collection.CustomDate3_State)"></GridColumn>
    </GridColumns>
</SfGrid>
@code {
    [Parameter]
    public IEnumerable<Item> Items { get; set; } = new List<Item>();

    [Parameter]
    public Collection Collection { get; set; } = new Collection();

    [Parameter]
    public bool Owns { get; set; } = false;

    SfGrid<Item> Grid = null!;

    public async Task ToolbarClickHandler(ClickEventArgs args)
    {

        if (args.Item.Id == "Grid_excelexport")
        {
#pragma warning disable BL0005
            ExcelExportProperties ExportProperties = new ExcelExportProperties();
            var columns = await Grid.GetColumnsAsync();
            columns.Add(new GridColumn() { Field = nameof(Item.TagsString), HeaderText = Localizer.GetString("Tags") });
            ExportProperties.Columns = columns;
            await Grid.ExportToCsvAsync(ExportProperties);
            return;
        }

        if (args.Item.Id == "Grid_pdfexport")
        {
            PdfExportProperties ExportProperties = new PdfExportProperties();
            var columns = await Grid.GetColumnsAsync();
            columns.Add(new GridColumn() { Field = nameof(Item.TagsString), HeaderText = Localizer.GetString("Tags") });
            ExportProperties.Columns = columns;
            await Grid.ExportToPdfAsync(ExportProperties);
            return;
#pragma warning restore BL0005

        }

        var selected = await Grid.GetSelectedRecordsAsync();
        if (selected.Count == 0) return;
        var item = selected.First();
        var routeValues = new { collectionId = Collection.Id, id = item.Id };
        string? link = null;
        if (args.Item.Text == "View")
            link = LinkGenerator.GetPathByAction("Details", "Items", routeValues);

        if (args.Item.Text == "Edit")
            link = LinkGenerator.GetPathByAction("Edit", "CollectionItems", routeValues);

        if (args.Item.Text == "Delete")
            link = LinkGenerator.GetPathByAction("Delete", "CollectionItems", routeValues);

        if (link != null)
            await JSRuntime.InvokeAsync<string>("open", link, "_blank");
    }
}