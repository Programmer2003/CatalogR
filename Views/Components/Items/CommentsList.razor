@using CatalogR.Models
@using Microsoft.AspNetCore.SignalR.Client
@using Syncfusion.Blazor.Navigations;
@inject NavigationManager Navigation
@inject LinkGenerator LinkGenerator
@implements IAsyncDisposable


<h4>Comments</h4>

@if (Auth)
{
    <div class="input-group">
        <input @bind="textInput" @bind:event="oninput" type="text" class="form-control" placeholder="Your message">
        <button class="btn btn-primary" type="button" @onclick="Send" disabled="@(!IsConnected || string.IsNullOrWhiteSpace(textInput))">Send</button>
    </div>
}

<div id="comments" class="d-flex flex-column gap-3">
    @if (Comments.Count != 0)
    {
        @foreach (var comment in Comments.Skip(SkipValue).Take(TakeValue))
        {
            <div class="card p-3">
                <div class="d-flex justify-content-between align-items-center">
                    <div class="user d-flex flex-column">
                        <div>
                            @if (UserId == comment.UserId)
                            {
                                <a href="@LinkGenerator.GetPathByAction("Index","UserCollections")">
                                    <small class="font-weight-bold text-primary">You</small>
                                </a>
                            }
                            else
                            {
                                <a href="@LinkGenerator.GetPathByAction("ByUser","Collections", new {id = comment.UserId})">
                                    <small class="font-weight-bold text-primary">@comment.User?.UserName</small>
                                </a>
                            }
                            <small> , @comment.TimeStamp.ToLocalTime().ToString("f")</small>
                        </div>
                        <span>
                            <small class="font-weight-bold">@comment.Text</small>
                        </span>
                    </div>
                </div>
            </div>
        }

        <SfPager @ref="@Page" PageSize=5 NumericItemsCount=4 TotalItemsCount=@Comments.Count ItemClick="Click" CssClass=PagerCss>
        </SfPager>
    }
</div>

<style>
    .PagerCss, .e-pager.PagerCss .e-currentitem.e-numericitem.e-focused, .e-pager.PagerCss .e-currentitem {
        background: unset;
    }
</style>

@code {
    [Parameter]
    public LinkedList<Comment> Comments { get; set; } = new LinkedList<Comment>();

    [Parameter]
    public string UserId { get; set; } = string.Empty;

    [Parameter]
    public int ItemId { get; set; }

    [Parameter]
    public bool Auth { get; set; }

    private HubConnection? hubConnection;
    private string? textInput;

    SfPager Page = new SfPager();
    public int SkipValue = 0;
    public int TakeValue = 5;
    public void Click(PagerItemClickEventArgs args)
    {
        TakeValue = Page.PageSize;
        SkipValue = (args.CurrentPage * TakeValue) - TakeValue;
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/commentshub"))
            .Build();

        hubConnection.On<Comment>("CommentAdded", (comment) =>
        {
            Comments.AddFirst(comment);
            InvokeAsync(StateHasChanged);
        });

        await HubInitialize();
    }

    private async Task HubInitialize()
    {
        if (hubConnection == null) return;

        await OnHubStart();
        hubConnection.Closed += async (exception) =>
        {
            if (exception == null)
            {
                await OnHubStart();
            }
            else
            {
                Console.WriteLine($"Connection closed due to an error: {exception}");
            }
        };
    }

    private async Task OnHubStart()
    {
        if (hubConnection == null) return;

        await hubConnection.StartAsync();
        await hubConnection.SendAsync("AddToGroup", ItemId);
    }


    private async Task Send()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("AddComment", UserId, ItemId, textInput);
            textInput = string.Empty;
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}